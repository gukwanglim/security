1. security 프로젝트를 생성하여 application.yml을 작성하고(사진 1번, mariadb를 사용(이전에 데이터베이스를 생성한다.(사진 1-2번))) controller 페키지를 생성하여 그 안에 
    IndexController 클래스를 만든다.        (사진 2번)

    추가적으로 이번에 사용하는 템플릿은 spring에서 권장하고 있는 Mustache를 사용한다.
        Mustache의 기본 폴더는 src/main/resource/로 잡혀 있으며, 이를 사용하기 위해 뷰리졸버 설정은 prefix : templates, suffix : mustache로 설정한다.   (사진 3번)
        (Mustache를 설치하게 된다면 (사진 4번) 기본적으로 설정이 적용되어 있어서 굳이 사진 3번과 같이 작성해줄 필요는 없다.)

        다음으로 index.html 파일을 생성한다.
        하지만, 현재 사용하고 있는 Mustache는 src/main/resource/templates/index.mustache로 파일을 찾게 된다.
        때문에 index.html을 찾도록 설정을 변경할 필요가 있다.

2. Mustache가 html을 인식할 수 있도록 만들기 위해서 config 페키지를 생성하여 WebMvcConfig 클래스를 생성하여 IoC로 등록하기 위해 @Configuration 어노테이션을 준다.   (사진 4번)
    WebMvcConfig는 WebMvcConfigurer로 implements되며 configureViewResolvers를 overriding 한다.
    여기서 다른 설정은 기존 설정처럼 작성하지만 setSuffix 부분을 ".html"으로 설정하면 된다. 

3. 이제 spring boot app을 실행하면 로그인 화면이 나타나고 user로 로그인을 하게 되면 index.html이 브라우져에 나타난다.
    이때, 시큐리티의 작동으로 인해 login 페이지가 자동으로 생성되며 넘어가게 된다.  (사진 5번)

    다른 페이지를 확인하기 위해서 @GetMapping을 사용하는데 여기서 @ResponseBody 어노테이션을 사용하면 @Controller 어노테이션 안에서 @RestController와 같이 사용할 수 있다.  (사진 7,8번)

    그러나 현재 login 페이지는 코드에 작성된 login을 출력하는 것이 아닌 시큐리티에서 제공하는 로그인 페이지를 띄우게 된다.,

    이런 시큐리티의 기능을 편집하기 위해서는 config 페키지에선 SecurityConfig 클래스를 생성하여 스프링 필터 체인에 등록하여 편집해야 한다.

4. IoC 빈 등록을 위해 @Configuration 어노테이션을 사용하고, 
    시큐리티 활성(스프링 시큐리티 필터(SecurityConfig)가 스프링 필터체인에 등록됨)을 위해 @EnableWebSecurity 어노테이션을 사용한다.     
    
    예전에 사용되던 WebSecurityConfigurerAdapter 기능이 사라져 SecurityFilterChain을 사용해야 한다. 
    때문에 @EnableGlobalMethodSecurity 어노테이션을 불러와 사용해야 하지만 현재 나오게된 spring boot 6.0.2 버전에서는 @EnableMethodSecurity으로 변경되었다.
        (어노테이션이 변경되면서 여러 편집 기능들도 수정되어 사용하기 어렵기에 일단은 spring boot의 버전을 5.3.22로 낮춰 사용하겠다.)

5. SecurityConfig 클래스에 작성된 코드를 보면 @EnableGlobalMethodSecurity을 사용하여 SecurityFilterChain을 이용할 수 있게 한다.     (사진 9번)

    .antMatchers("/user/**").authenticated()                                                : /user/** 경로를 통해 들어오게 된다면 인증(로그인)이 필요하다.
    .antMatchers("/manager/**").access("hasRole('RoLe_ADMIN') or hasRole('RoLe_MANAGER')")  : /manager/** 경로는 RoLe_ADMIN 혹은 RoLe_MANAGER 권한이 있는 사람만 들어올 수 있다.
    .anyRequest().permitAll()                                                               : 이외의 방식으로 접근하는 것은 허용하겠다.
    .formLogin(), .loginPage("/login");                                                     : login 페이지는 시큐리티가 정해주는 양식이 아닌 직접 정한 양식을 사용하겠다.


    이제 spring boot app을 실행시키면 manager, admin 페이지는 403이 뜨는 것을 확인할 수 있으며      (사진 10번)
    login 페이지로 들어갈 경우 시큐리티가 제공해주는 것이 아닌 코드로 작성한 페이지가 뜨는 것을 확인할 수 있다.     (사진 11번)