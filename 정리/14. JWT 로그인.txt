1. config 패키지 아래 auth 패키지를 생성하여 PrincipalDetails.java를 작성.       (사진 1번)

    PrincipalDetailsService.java를 작성하기에 앞서 UserRepository 인터페이스 생성.      (사진 2번)

    PrincipalDetailsService.java 작성.      (사진 3번)

        (이 부분의 자세한 설명은 3. 로그인 부분에서 확인할 수 있다.)

2. PrincipalDetailsService.java는 로그인 요청을 받게 될 경우 @Service가 동작하게 된다.(http://localhost:8080/login)
    (시큐리티의 기본 로그인 주소)

    하지만 postman으로 로그인을 시도해보면 사진 4번과 같이 404 에러가 발생한다.
    그 이유는 현재 SecurityConfig.java에서 .formLogin().disable()으로 로그인폼을 사용하지 않도록 되어 있기 때문이다.

    즉, http://localhost:8080/login가 동작을 하지 않기 때문에 필터를 사용하여 직접 로그인을 할 수 있도록 만들어야 한다.

3. 필터를 만들기 위해서 config 패키지 안에 jwt 패키지를 생성하여 JWTAuthenticationFilter.java를 만든다.     (사진 5번)
    JWTAuthenticationFilter.java는 UsernamePasswordAuthenticationFilter를 상속하는데 UsernamePasswordAuthenticationFilter는 시큐리티에 기본적으로 존재하는 필터이다.

    이 필터는 /login 요청을 통해 username, password를 전송(post)하게 되면 동작한다.
        (하지만, 현재 코드에서는 .formLogin().disable()으로 인해 동작하지 않음)

    따라서 .formLogin().disable()를 사용하면서 UsernamePasswordAuthenticationFilter가 동작하게 만들어줘야 한다.
    이 방법은 SecurityConfig.java에 등록해주면 된다.
    등록하게 위해서는 .addFilter()를 사용하여 UsernamePasswordAuthenticationFilter를 상속받은 JWTAuthenticationFilter를 넣어주면 된다.      (사진 6번)

    이런 식으로 필터를 전달해주면 꼭 받아야하는 파라미터가 존재한다.(AuthenticationManager)
        (AuthenticationManager를 통해서 로그인을 진행하게 된다.)

     * 이 파라미터를 넘기는 방법은 단순하게 JWTAuthenticationFilter(authenticationManager())을 사용하면 되지만, 현재 어뎁터를 사용하는 것이 아닌 필터 체인을 이용한 코드이므로 이와 같은 방식은 
        사용이 불가능하다.

        때문에 CorsConfig.java를 생성하여 코드를 진행해야한다.