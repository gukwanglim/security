1. 필터를 등록하기 위해 filter 패키지를 생성하고, MyFilter1.java를 만든다.              (사진 1번)
    MyFilter1.java를 실제 필터로 만들기 위해서는 implements Filter를 해줘야 한다.(import javax.servlet.Filter;)

    또한, 필터를 거친 후, 계속해서 코드가 동작하게 만들기 위해서는 chain.doFilter(request, response);와 같이 chain을 사용해야한다.
        만약, chain을 사용하지 않게 된다면 필터가 동작하고 코드가 멈추게 된다.

2. 이렇게 생성한 필터를 걸기 위해서 SecurityConfig.java로 돌아가 .addFilter(new MyFilter1())을 사용한다.        (사진 2번)
    하지만 이 상태로 spring boot app을 실행하면 에러가 발생한다.
        (시큐리티 필터만 등록할 수 있는 상태에서 일반 필터를 사용했기 때문이다.)

    이 문제를 해결하기 위해서는 addFilterBefore() 혹은 addFilterAfter()와 같이 스프링 필터가 동작하고 난 이전이나 이후에 동작하게 만들면 된다.      (사진 3번)
        때문에 어떠한 시큐리티 필터가 존재하는지에 대해 어느 정도는 알고 있어야 한다.

    이제 spring boot app을 실행해보면 MyFilter1.java에서 작성한 sysout이 출력됨을 확인할 수 있다.       (사진 4번)

3. 위의 방식처럼 SecurityConfig.java의 SecurityFilterChain에서 http로 걸어주는 것이 아니라 클래스를 생성하여 필터를 걸어주는 방법도 존재한다.       
    (사진 3번의 .addFilterBefore(new MyFilter1(), BasicAuthenticationFilter.class) 부분을 주석처리)

    config 패키지 안에 FilterConfig 클래스를 작성.      (사진 5번)

        FilterRegistrationBean<>에 생성한 필터를 넣고
        bean.addUrlPatterns("/*");를 사용하여 필터를 걸어줄 주소를 설정
        bean.setOrder(0);의 경우는 낮은 번호가 필터 중에서 가장 먼저 실행

    spring boot app을 실행해보면 이전과 마찬가지로 필터가 걸리는 것을 확인할 수 있다.       (사진 6번)

4. 필터를 추가하기 위해 MyFilter2.java를 작성하고       (사진 7번)
    FilterConfig.java에서 코드를 복사하여 사용하면      (사진 8번)

    setOrder()에 따라 필터의 순서가 결정되고 필터를 거치는 모습을 확인할 수 있다.       (사진 9번)

5. 클래스를 생성하여 사용된 필터와 필터 체인에서 사용되는 필터의 순서를 알아보기 위해서 MyFilter3.java를 작성하고 SecurityConfig.java에서 필터를 추가해보면     (사진 10번)
    SecurityConfig.java의 필터 체인이 먼저 실행되는 것을 확인할 수 있다.        (사진 11번)