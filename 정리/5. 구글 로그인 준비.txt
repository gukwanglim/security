1. google api 콘솔에서 새로운 프로젝트를 생성한다.      (사진 1번)

2. API 및 서비스 - OAuth 동의 화면 에서 (사진 2번) 외부에 체크 (사진 3번)를 하고 앱 이름 및 이메일을 작성하면 생성된다.     (사진 4번)

3. 프로젝트 생성이 완료되면 사용자 인증 정보 - 사용자 인증 정보 만들기 - OAuth 클라이언트 ID에 들어가(사진 5번)
    애플리케이션 유형과 이름을 설정하고, 승인된 리디렉션  URI의 주소를 http://localhost:8080/login/oauth2/code/google으로 설정한다. (사진 6번)
        (이 주소는 엑세스 토큰을 받기 위한 코드를 받을 수 있는 주소이다.    이전 blog 프로젝트에서는 하나하나 설정을 해야했지만, oauth2를 사용하게 되면 이 주소로 고정된다.)
        (즉, 이에 대한 controller를 만들 필요가 사라진다.)

4. 위 과정을 마치고 클라이언트를 생성하게 되면 클라이언트 ID와 보안 비밀번호를 받게 된다.       (사진 7번)

    클라이언트 ID : 332362076982-96bp9gj2o51hvkp34s52g80mvidg2i12.apps.googleusercontent.com
    클라이언트 보안 비밀번호 : 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

5. oauth2-client를 실행하기 위해 pom.xml에서 코드를 작성한다.   (사진 8번)

6. application.yml로 넘어가 Security 부분을 작성한다.       (사진 9번)
    이때 scope 부분에서는 email과 profile을 가져와 사용할 수 있도록 해주는 것이다.

7. 구글 로그인 버튼을 만들기 위해 loginForm.html로 들어가 버튼을 생성한다.      (사진 10번)
    여기서 사용되는 href 주소는 oauth2 client에서 고정으로 사용되는 주소이다.

8. 현재는 로그인 페이지에 생성된 구글 로그인 버튼을 누르게 될 경우 404 페이지가 뜨게 된다.      (사진 11번)
    구글 로그인 페이지를 연결하기 위해서는 SecurityConfig.java에서 .oauth2Login()을 사용하여 구글 로그인을 진행시킨다.      (사진 12번)
        (구글 로그인 페이지도 일반 로그인 페이지와 같은 주소를 사용하게 한다.(.loginPage("/loginForm")))

    이제 구글 로그인을 실행하게 되면 사진 13번과 같이 구글 로그인 창이 뜨게 된다.

    이렇게 한다면 구글 아이디를 가지고 로그인을 할 수 있게 된다.(데이터베이스에는 저장되지 않는다.)

    (코드를 받게 되면(인증) 엑세스 토큰을 반환받을 수 있고(권한) 이 권한을 통해 사용자 프로필 정보를 가져올 수 있으며 그 정보를 토대로 회원가입을 자동으로 진행시킬 수 있으며,
    추가적은 정보(집주소, 인증번호 등) 추가적으로 그 정보를 받을 수 있게 할 수 있다.)

        * 여기서 중요한 것은 구글 로그인이 완료가 되면 코드를 받는 것이 아닌 엑세스토큰 + 사용자 프로필 정보를 가져오게 된다. 

9. 구글 로그인을 마치고 후처리를 하기 위해 .userInfoEndpoint()와 .userService(null)를 작성한다.     (사진 13번) 
    여기서 .userService(null)에서 null이 아닌 Oauth2userService가 들어와야 하지만, 현재는 만들어지지 않은 상태로 null을 넣어둔다.

10. config 패키지 안에 oauth 패키지를 생성한 후, PrincipalOauth2UserService 클래스를 생성한다.
    이때, PrincipalOauth2UserService 클래스는 DefaultOAuth2UserService 타입이 되야 한다.(extends 실행)      (사진 15번)

11. PrincipalOauth2UserService를 작성했다면 다시 SecurityConfig로 돌아와 @Autowired를 사용하여 이전의 null 대신에 principalOauth2UserService를 사용한다.        (사진 16번)

12. 아직 후처리가 진행된 것이 아니다.
    후처리를 진행하기 위해서 PrincipalOauth2UserService로 돌아가 loadUser를 override한다.       (사진 17번)

    어떤 값을 받아오는지 확인하기 위해 sysout을 찍어보면 사진 18번과 같은 값을 받아오는 것을 확인할 수 있다.

13. 하지만, 구글을 통해 로그인한 회원과 일반 로그인을 진행한 회원을 구분하지 못하기 때문에 User 테이블에 provider와 providerId를 추가한다.      (사진 19번)


    * 구글 로그인을 진행 후, 더 많은 정보를 보기 위해서는 사진 20번과 같이 sysout을 실행하면된다.