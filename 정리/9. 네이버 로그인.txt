1. spring boot의 OAuth2-client에서는 구글, 페이스북, 트위터 등의 서비스를 기본적으로 제공하지만, 네이버와 카카오는 제공하지 않는다.
    때문에 구글이나 페이스북과는 달리 application.yml에서 client-name, authorization-grant-type, redirect-uri 등을 직접 작성해야한다.       (사진 1번)
        (구글이나 페이스북에서도 redirect-uri를 적어줘도 문제가 없지만, 정해진 주소를 변경하게 된다면 에러가 발생한다. (네이버는 정해진 주소가 없기 때문에 주소가 변경되어도 상관없다.))

2. 네이버 로그인을 구현하기 위해 네이버 개발자 센터로 들어가서 로그인 후, Application - 애플리케이션 등록(사진 2번) 
    이름과 필요한 정보를 선택, 오픈 API 환경은 PC웹이며 서비스 URL은 http://localhost:8080, Callback URL은 application.yml에서 redirect-uri에 작성한 주소를 넣어준다.   (사진 3,4번)

    등록하면 나오게 되는 Client ID와 Client Secret을 application.yml에 작성한다.    (사진 5번)

3. 코드를 저장할 경우, naver는 provider가 아니기 때문에 에러가 발생하게 된다.       (사진 6,7번)

    때문에 application.yml에 직접 provider를 넣어준다.      (사진 8번)
        이 코드는 Documents - 개발 가이드(사진 9번)의 소셜 로그인에서 확인 가능하다.

4. 네이버 로그인 버튼을 만들기 위해 loginForm.html에서 로그인 버튼을 만든다.        (사진 10번)
    여기서 사용되는 herf의 주소는 결과적으로 application.yml에서 작성한 authorization-uri 주소를 요청하게 되는 것이다.

    spring boot app을 실행해서 네이버 로그인 버튼을 눌러보면 사진 11번과 같이 네이버의 동의 페이지가 뜨게 된다.

    하지만 동의를 하고 들어가게 되면 500 에러가 발생하는 것을 볼 수 있다.       (사진 12번)
    에러를 살펴보면 값은 잘 받아온 것을 확인할 수 있다.     (사진 13번)
        (이것으로 확인할 수 있는 내용은 구글, 페이스북에서는 getAuthorities()으로 받아오는 정보가 네이버에서는 user-name-attribute: response으로 response에 담겨 있다는 사실이다.
        사진 13번을 보면 id, email, name이 response 안의 response에 들어 있는 것을 볼 수 있다.)
        (즉, 현재 에러가 발생하는 이유는 코드가 구글과 페이스북만을 지원하도록 만들어져 있기 때문이다.)

    네이버도 지원하는 코드를 만들기 위해서는 구글, 페이스북과 마찬가지로 NaverUserInfo.java를 생성한다.     (사진 14번)
        여기서 response 안의 response에 들어 있는 id, email, name을 사용하기 위해서 PrincipalOauth2UserService.java에서 네이버 로그인 요청을 받을 때,
            Map 타입으로 받아오면서 getAttributes()으로 불러오게 되는 response에서 그 안에 들어있는 response를 .get("response")로 받아온다.     (사진 15번)

5. 이제 네이버 로그인을 진행하게 되면 데이터베이스에 정보가 저장되는 것을 확인할 수 있다.       (사진 16번)