1. 페이스북 api 콘솔에 들어가 페이스북 로그인. 유형은 없음을 선택한다.      (사진 1번)
    이름을 설정한 후, 다시 한번 비밀번호를 입력하게 되면 사진 2번과 같은 화면이 나온다.
    현재 사용하는 것이 로그인 서비스이므로 Facebook 로그인을 선택한다.

    url을 작성한 다음 계속을 넘어가게 되면 설정은 끝난다.       (사진 3번)

2. 기본설정(사진 4번)으로 넘어가 앱 아이디랑 시크릿 코드 확인
    ID : 678904487163123
    시크릿 코드 : 22689eef69204fcbc37254b6b4c1f0c7      (사진 5번)

3. 코드로 돌아와 application.yml에서 이전에 작성한 구글 로그인 아래에 페이스북 로그인을 추가한다.       (사진 6번)
    여기서 ID와 시크릿 코드를 작성하고 scope에는 email과 public_profile으로 작성해야한다.

4. 페이스북 로그인 버튼을 만들기 위해서 loginForm.html에서 코드를 작성한다.(/oauth2/authorization/facebook)     (사진 7번)
    spring boot app을 실행하고 페이스북 로그인 버튼을 눌러보면 사진 8번과 같이 권한 요청을 확인할 수 있다.

    로그인을 하게 되면 데이터베이스에 저장됨을 확인할 수 있다.              (사진 9번)
        이때, password는 이전 구글 로그인에서 설정한 것과 같은 password로 들어가게 되며, providerId의 경우에는 null값이 들어감을 확인할 수 있다.

        그 이유는 구글의 경우에 String providerId = oauth2User.getAttribute("sub");	와 같이 "sub"로 providerId를 가져올 수 있지만,
            페이스북의 경우에는 "sub"가 아닌 "Id"로 가져와야 하기 때문이다.

        만약, 이 상태로 사용하게 된다면 이후 유지보수에 있어 문제가 발생할 수 있다.
        때문에 oauth 패키지 아래에 provider 패키지를 생성하고, 그 안에 OAuth2UserInfo 인터페이스를 생성한다.        (사진 10번)

        다음으로 구글의 경우와 페이스북의 경우에 사용되는 sub, id를 사용하기 위해서 provider 패키지 안에 GoogleUserInfo.java와 FacebookUserInfo.java를 생성한다.        (사진 11, 12번)

            GoogleUserInfo.java에서는 구글에 대한 처리를 위해 implements OAuth2UserInfo를 한 후, oauth2User.getAttributes()를 사용할 수 있도록 private Map<String, Object> attributes;을 작성한다.
                추가로 생성자를 불러와 Map<String, Object> attributes을 파라미터로 넣어주고 this.attributes = attributes;를 사용한다.

                이후, getProviderId, getProvider, getEmail, getName에 맞는 return 값을 준다.

            FacebookUserInfo.java의 경우에는 구글과 같지만, getProviderId에서 "sub"가 아닌 "id"로 getProvider에서는 "facebook"으로 받아온다.

5. provider 패키지에서 후처리를 실행했기 때문에 기존에 적혀있던 PrincipalOauth2UserService.java에서 구글 로그인, 페이스북 로그인의 경우 들어오게 되는 요청에 따라 oAuth2UserInfo에 맞는 값을 넣어준다.
    (사진 13번)

6. 다시 spring boot app을 실행하고 구글, 페이스북 로그인을 진행해보면 데이터베이스에 알맞은 값이 들어감을 확인할 수 있다.       (사진 14번)

7. 추가로 일반 로그인을 하게 되면 데이터베이스에 저장되는 컬럼 중 provider, providerId 부분에 null 값이 들어감을 확인할 수 있다.        (사진 15번)
    이것을 활용하면 일반 회원가입과 OAuth 회원가입을 구분할 수 있게 된다.